set(INCLUDE_DIR "../include")
set(LIBS_DIR "../lib")

add_executable(der der.cpp)
target_link_directories(der PUBLIC ${LIBS_DIR})
target_include_directories(der PUBLIC ${INCLUDE_DIR})
target_link_libraries(der PUBLIC -lm)
if (${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
    target_compile_options(der PUBLIC $<TARGET_PROPERTY:MKL::MKL,INTERFACE_COMPILE_OPTIONS>)
    target_include_directories(der PUBLIC $<TARGET_PROPERTY:MKL::MKL,INTERFACE_INCLUDE_DIRECTORIES>)
    target_link_libraries(der PUBLIC $<LINK_ONLY:MKL::MKL>)
endif()
add_test(NAME der COMMAND der)

add_executable(SingleTrack SingleTrack.cpp)
target_link_directories(SingleTrack PUBLIC ${LIBS_DIR})
target_include_directories(SingleTrack PUBLIC ${INCLUDE_DIR})
target_link_libraries(SingleTrack PUBLIC -lm)
if (${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
    target_compile_options(SingleTrack PUBLIC $<TARGET_PROPERTY:MKL::MKL,INTERFACE_COMPILE_OPTIONS>)
    target_include_directories(SingleTrack PUBLIC $<TARGET_PROPERTY:MKL::MKL,INTERFACE_INCLUDE_DIRECTORIES>)
    target_link_libraries(SingleTrack PUBLIC $<LINK_ONLY:MKL::MKL>)
endif()
add_test(NAME SingleTrack COMMAND SingleTrack)

add_executable(SingleTrackInt SingleTrackInt.cpp)
target_link_directories(SingleTrackInt PUBLIC ${LIBS_DIR})
target_include_directories(SingleTrackInt PUBLIC ${INCLUDE_DIR})
target_link_libraries(SingleTrackInt PUBLIC -lm)
if (${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
    target_compile_options(SingleTrackInt PUBLIC $<TARGET_PROPERTY:MKL::MKL,INTERFACE_COMPILE_OPTIONS>)
    target_include_directories(SingleTrackInt PUBLIC $<TARGET_PROPERTY:MKL::MKL,INTERFACE_INCLUDE_DIRECTORIES>)
    target_link_libraries(SingleTrackInt PUBLIC $<LINK_ONLY:MKL::MKL>)
endif()
add_test(NAME SingleTrackInt COMMAND SingleTrackInt)

add_executable(der2 der2.cpp)
target_link_directories(der2 PUBLIC ${LIBS_DIR})
target_include_directories(der2 PUBLIC ${INCLUDE_DIR})
target_link_libraries(der2 PUBLIC -lm)
if (${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
    target_compile_options(der2 PUBLIC $<TARGET_PROPERTY:MKL::MKL,INTERFACE_COMPILE_OPTIONS>)
    target_include_directories(der2 PUBLIC $<TARGET_PROPERTY:MKL::MKL,INTERFACE_INCLUDE_DIRECTORIES>)
    target_link_libraries(der2 PUBLIC $<LINK_ONLY:MKL::MKL>)
endif()
add_test(NAME der2 COMMAND der2)

add_executable(SingleTrack2 SingleTrack2.cpp)
target_link_directories(SingleTrack2 PUBLIC ${LIBS_DIR})
target_include_directories(SingleTrack2 PUBLIC ${INCLUDE_DIR})
target_link_libraries(SingleTrack2 PUBLIC -lm)
if (${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
    target_compile_options(SingleTrack2 PUBLIC $<TARGET_PROPERTY:MKL::MKL,INTERFACE_COMPILE_OPTIONS>)
    target_include_directories(SingleTrack2 PUBLIC $<TARGET_PROPERTY:MKL::MKL,INTERFACE_INCLUDE_DIRECTORIES>)
    target_link_libraries(SingleTrack2 PUBLIC $<LINK_ONLY:MKL::MKL>)
endif()
add_test(NAME SingleTrack2 COMMAND SingleTrack2)

add_executable(SingleTrackInt2 SingleTrackInt2.cpp)
target_link_directories(SingleTrackInt2 PUBLIC ${LIBS_DIR})
target_include_directories(SingleTrackInt2 PUBLIC ${INCLUDE_DIR})
if (${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
    target_compile_options(SingleTrackInt2 PUBLIC $<TARGET_PROPERTY:MKL::MKL,INTERFACE_COMPILE_OPTIONS> -qopenmp)
    target_include_directories(SingleTrackInt2 PUBLIC $<TARGET_PROPERTY:MKL::MKL,INTERFACE_INCLUDE_DIRECTORIES>)
    target_link_libraries(SingleTrackInt2 PUBLIC $<LINK_ONLY:MKL::MKL> -lm)
else()
    target_link_libraries(SingleTrackInt2 PUBLIC -fopenmp -lm)
    # target_compile_options(SingleTrackInt2 PUBLIC -fopenmp)
endif()
add_test(NAME SingleTrackInt2 COMMAND SingleTrackInt2)